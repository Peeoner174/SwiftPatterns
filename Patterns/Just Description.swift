//
//  Prototype.swift
//  Patterns
//
//  Created by Pavel Kochenda on 04.09.2020.
//  Copyright © 2020 MSI. All rights reserved.
//

/*
 Прототип — это порождающий паттерн проектирования, который позволяет копировать объекты, не вдаваясь в подробности их реализации.
 
 Протокол NSCopying реализует паттерн.
 */

/*
 Decorator - Позволяет динамически добавлять объектам новую функциональность, оборачивая их в полезные «обёртки».
 
 Отличный пример - это операторы в реактивном программировании.
 */

/*
 Flyweight - Позволяет вместить бóльшее количество объектов в отведённую оперативную память. Легковес экономит память, разделяя общее состояние объектов между собой, вместо хранения одинаковых данных в каждом объекте.
 
 В качестве примера ARC Side Table. Это Хеш-таблица, в качестве ключа в ней используется хэшированный адрес объекта.
 * Во-первых это сокращает размер памяти, который требуется для каждого объекта, так как часть метаданных о нем хранится во внешнем хранилище, а объект лишь содержит ссылку на нее.
 * Во-вторых слабая ссылка в swift ссылается на соответствующий элемент в хэш-таблице, а не на сам объект. Такой подход устраняет проблему возникновения зомби-объектов(ситуация, когда формально объект уже недоступен из кода программы, но память, которую он занимает еще не освобожденна: tiny.cc/10trsz )
 */


